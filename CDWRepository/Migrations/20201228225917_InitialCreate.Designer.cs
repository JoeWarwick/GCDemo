// <auto-generated />
using System;
using CDWRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CDWRepository.Migrations
{
    [DbContext(typeof(CDWSVCModel<CDWSVCUser>))]
    [Migration("20201228225917_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("CDWRepository.CDWSVCUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashStr")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CDWRepository.ClientErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstSubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSubmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StackHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ClientErrorLogs");
                });

            modelBuilder.Entity("CDWRepository.DbFeedType", b =>
                {
                    b.Property<int>("FeedTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedTypeId");

                    b.ToTable("FeedTypes");
                });

            modelBuilder.Entity("CDWRepository.EmailSubscriber", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Replied")
                        .HasColumnType("INTEGER");

                    b.HasKey("Email");

                    b.ToTable("EmailSubscribers");
                });

            modelBuilder.Entity("CDWRepository.FeedImage", b =>
                {
                    b.Property<int>("FeedImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Attribution")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caption")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DoNotShow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Documentation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPortrait")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Published")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RotateDegrees")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("Watermarking")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedImageId");

                    b.HasIndex("ReporterId");

                    b.ToTable("FeedImages");
                });

            modelBuilder.Entity("CDWRepository.FeedSource", b =>
                {
                    b.Property<int>("FeedSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeedBaseUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeedTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupFeedSourceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LoadChildren")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProducesArtifact")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Shared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedSourceId");

                    b.HasIndex("FeedTypeId");

                    b.HasIndex("GroupFeedSourceGroupId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FeedSources");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceChildren", b =>
                {
                    b.Property<int>("FeedSourceParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedSourceChildId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceParentId", "FeedSourceChildId");

                    b.HasIndex("FeedSourceChildId");

                    b.ToTable("FeedSourceChildren");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceExampleImages", b =>
                {
                    b.Property<int>("FeedSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExampleImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceId", "ExampleImageId");

                    b.HasIndex("ExampleImageId");

                    b.ToTable("FeedSourceExampleImages");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceFeedTags", b =>
                {
                    b.Property<int>("FeedSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeedTagTag")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedSourceId", "Tag");

                    b.HasIndex("FeedTagTag");

                    b.ToTable("FeedSourceFeedTags");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceFeedTransforms", b =>
                {
                    b.Property<int>("FeedSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedTransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceId", "FeedTransformId");

                    b.HasIndex("FeedTransformId");

                    b.ToTable("FeedSourceFeedTransforms");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroup", b =>
                {
                    b.Property<int>("FeedSourceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FormatUrlString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Shared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Site")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedSourceGroupId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FeedSourceGroups");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroupFeedTransforms", b =>
                {
                    b.Property<int>("FeedSourceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedTransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceGroupId", "FeedTransformId");

                    b.HasIndex("FeedTransformId");

                    b.ToTable("FeedSourceGroupFeedTransforms");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroupParams", b =>
                {
                    b.Property<int>("FeedSourceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceGroupId", "ParamId");

                    b.HasIndex("ParamId");

                    b.ToTable("FeedSourceGroupParams");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceParams", b =>
                {
                    b.Property<int>("FeedSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedSourceId", "ParamId");

                    b.HasIndex("ParamId");

                    b.ToTable("FeedSourceParams");
                });

            modelBuilder.Entity("CDWRepository.FeedTag", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.HasKey("Tag");

                    b.ToTable("FeedTag");
                });

            modelBuilder.Entity("CDWRepository.FeedTransform", b =>
                {
                    b.Property<int>("FeedTransformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InputFeedTypeFeedTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OutputFeedTypeFeedTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("FeedTransformId");

                    b.HasIndex("InputFeedTypeFeedTypeId");

                    b.HasIndex("OutputFeedTypeFeedTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FeedTransforms");
                });

            modelBuilder.Entity("CDWRepository.FeedTransformParams", b =>
                {
                    b.Property<int>("FeedTransformId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeedTransformId", "ParamId");

                    b.HasIndex("ParamId");

                    b.ToTable("FeedTransformParams");
                });

            modelBuilder.Entity("CDWRepository.Invoice", b =>
                {
                    b.Property<string>("InvoiceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerFieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CustomerFieldId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("CDWRepository.Param", b =>
                {
                    b.Property<int>("ParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Choice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Choices")
                        .HasColumnType("TEXT");

                    b.Property<string>("Desc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .HasColumnType("TEXT");

                    b.HasKey("ParamId");

                    b.ToTable("Param");
                });

            modelBuilder.Entity("CDWRepository.Subscribable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CachePerTimeSpan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeedSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FeedTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArtifact")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumCacheCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceGroupFeedSourceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeedSourceId");

                    b.HasIndex("FeedTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SourceGroupFeedSourceGroupId");

                    b.ToTable("Subscribables");
                });

            modelBuilder.Entity("CDWRepository.SubscribableExampleImages", b =>
                {
                    b.Property<int>("SubscribableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExampleImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubscribableId", "ExampleImageId");

                    b.HasIndex("ExampleImageId");

                    b.ToTable("SubscribableExampleImages");
                });

            modelBuilder.Entity("CDWRepository.SubscribableFeedTransforms", b =>
                {
                    b.Property<int>("SubscribableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedTransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubscribableId", "FeedTransformId");

                    b.HasIndex("FeedTransformId");

                    b.ToTable("SubscribableFeedTransforms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CDWRepository.FeedImage", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId");
                });

            modelBuilder.Entity("CDWRepository.FeedSource", b =>
                {
                    b.HasOne("CDWRepository.DbFeedType", "FeedType")
                        .WithMany()
                        .HasForeignKey("FeedTypeId");

                    b.HasOne("CDWRepository.FeedSourceGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupFeedSourceGroupId");

                    b.HasOne("CDWRepository.CDWSVCUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceChildren", b =>
                {
                    b.HasOne("CDWRepository.FeedSource", "FeedSourceChild")
                        .WithMany()
                        .HasForeignKey("FeedSourceChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.FeedSource", "FeedSourceParent")
                        .WithMany("FeedSources")
                        .HasForeignKey("FeedSourceParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedSourceExampleImages", b =>
                {
                    b.HasOne("CDWRepository.FeedImage", "ExampleImage")
                        .WithMany("FeedSources")
                        .HasForeignKey("ExampleImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.FeedSource", "FeedSource")
                        .WithMany("ExampleImages")
                        .HasForeignKey("FeedSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedSourceFeedTags", b =>
                {
                    b.HasOne("CDWRepository.FeedSource", "FeedSource")
                        .WithMany("Tags")
                        .HasForeignKey("FeedSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.FeedTag", "FeedTag")
                        .WithMany("FeedSources")
                        .HasForeignKey("FeedTagTag");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceFeedTransforms", b =>
                {
                    b.HasOne("CDWRepository.FeedSource", "FeedSource")
                        .WithMany("FeedTransforms")
                        .HasForeignKey("FeedSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.FeedTransform", "FeedTransform")
                        .WithMany("FeedSources")
                        .HasForeignKey("FeedTransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroup", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroupFeedTransforms", b =>
                {
                    b.HasOne("CDWRepository.FeedSourceGroup", "FeedSourceGroup")
                        .WithMany("FeedTransforms")
                        .HasForeignKey("FeedSourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.FeedTransform", "FeedTransform")
                        .WithMany("FeedSourceGroups")
                        .HasForeignKey("FeedTransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedSourceGroupParams", b =>
                {
                    b.HasOne("CDWRepository.FeedSourceGroup", "FeedSourceGroup")
                        .WithMany("Params")
                        .HasForeignKey("FeedSourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.Param", "Param")
                        .WithMany("FeedSourceGroups")
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedSourceParams", b =>
                {
                    b.HasOne("CDWRepository.FeedSource", "FeedSource")
                        .WithMany("Params")
                        .HasForeignKey("FeedSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.Param", "Param")
                        .WithMany("FeedSources")
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.FeedTransform", b =>
                {
                    b.HasOne("CDWRepository.DbFeedType", "InputFeedType")
                        .WithMany()
                        .HasForeignKey("InputFeedTypeFeedTypeId");

                    b.HasOne("CDWRepository.DbFeedType", "OutputFeedType")
                        .WithMany()
                        .HasForeignKey("OutputFeedTypeFeedTypeId");

                    b.HasOne("CDWRepository.CDWSVCUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("CDWRepository.FeedTransformParams", b =>
                {
                    b.HasOne("CDWRepository.FeedTransform", "FeedTransform")
                        .WithMany("Params")
                        .HasForeignKey("FeedTransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.Param", "Param")
                        .WithMany("FeedTransforms")
                        .HasForeignKey("ParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.Invoice", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", "CustomerField")
                        .WithMany("InvoiceCollection")
                        .HasForeignKey("CustomerFieldId");
                });

            modelBuilder.Entity("CDWRepository.Subscribable", b =>
                {
                    b.HasOne("CDWRepository.FeedSource", "FeedSource")
                        .WithMany("Feeds")
                        .HasForeignKey("FeedSourceId");

                    b.HasOne("CDWRepository.DbFeedType", "FeedType")
                        .WithMany()
                        .HasForeignKey("FeedTypeId");

                    b.HasOne("CDWRepository.CDWSVCUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("CDWRepository.FeedSourceGroup", "SourceGroup")
                        .WithMany()
                        .HasForeignKey("SourceGroupFeedSourceGroupId");
                });

            modelBuilder.Entity("CDWRepository.SubscribableExampleImages", b =>
                {
                    b.HasOne("CDWRepository.FeedImage", "ExampleImage")
                        .WithMany("Subscribables")
                        .HasForeignKey("ExampleImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.Subscribable", "Subscribable")
                        .WithMany("ExampleImages")
                        .HasForeignKey("SubscribableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDWRepository.SubscribableFeedTransforms", b =>
                {
                    b.HasOne("CDWRepository.FeedTransform", "FeedTransform")
                        .WithMany("Subscribables")
                        .HasForeignKey("FeedTransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.Subscribable", "Subscribable")
                        .WithMany("FeedTransforms")
                        .HasForeignKey("SubscribableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDWRepository.CDWSVCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CDWRepository.CDWSVCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
